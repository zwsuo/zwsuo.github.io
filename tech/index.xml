<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on zwsuo&#39;s Blog</title>
    <link>http://zwsuo.github.io/tech/</link>
    <description>Recent content in Tech on zwsuo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 23 Feb 2018 12:32:24 +0800</lastBuildDate>
    
	<atom:link href="http://zwsuo.github.io/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>运维体系应该是啥样子</title>
      <link>http://zwsuo.github.io/tech/ops/</link>
      <pubDate>Fri, 23 Feb 2018 12:32:24 +0800</pubDate>
      
      <guid>http://zwsuo.github.io/tech/ops/</guid>
      <description>运维体系应该是啥样子   作者：刀把五
链接：https://www.zhihu.com/question/23228213/answer/116940889
来源：知乎
著作权归作者所有。
 结合现在云计算和DevOps的发展趋势，我觉得一个成熟的自动化运维平台应该包括以下的特性：
一、支持混合云的CMDB 现在越来越多的服务器都转到了云上，而主流的公有云、私有云平台都拥有比较完备的资源管理的API，这些API也就是构建一个自动化CMDB的基础。
新一代的自动化运维平台应该是可以基于这些API来自动维护和管理相关的服务器、存储、网络、负载均衡的资源的。
通过API对资源的操作都应该被作为操作日志记录下来，以备作为后续操作审计的基础数据。
CMDB这个东西听上去是老生常谈，但这个确实是所有运维工具的基础设施。
而基于开源工具做运维平台最大的麻烦，就是如何在各个工具之间把CMDB统一起来。
CMDB不统一起来，就意味着一旦要增加一台服务器，可能要在各个运维工具里面都要同步一下，这个还是非常折腾滴。
二、比较完备的监控+应用性能分析（APM） 能支持对平台的可用性、服务器的性能、各种服务（web服务、应用服务、数据库服务）的性能进行监控。做的好一些应该能进行更深入、或者关联性的性能分析。
现在市面上一般都会将资源性能监控和应用性能监控（APM）混合着讲，这里面的产品确实也有很多都是重叠的，两方面都会涉及到。
开源的性能监控系统主流有的Zabbix、Nagios，国产的开源监控平台有小米OpenFalcon，但这些基本都只是做基本的资源监控（服务器，磁盘、网络等）和简单的服务软件的性能监控（中间件，数据库等）。
而市面上的APM系统更主打的功能是应用性能分析，比如能精确定位到某个应用的URL的访问速度快慢，某些SQL执行速度的快慢，这些对于开发人员和运维人员快速定位问题还是很有帮助的。
APM这方面的商业工具，国外比较主流的有New Reclic、Dynatrace，国内的也就是透视宝、Oneapm、听云等，他们也提供了API进行集成。
APM这方面的开源工具有pinpoint（一个韩国团队开源的），zipkin（twitter开源），cat（大众点评开源）。
三、有一个还不错UI的批量运维工具 在业务发展比较快的情况下，从几台服务器，到几十台服务器，再到几百台服务器，批量运维的需求很自然就产生了，老板也希望越少的人干越多的活。
现在也有不少开源的批量运维工具，也都比较成熟了，比如puppet、chef、ansible、saltstack。
puppet和chef都是ruby做的，实话实说，ruby的熟手市面上很少，比python不是难招一点。
我个人比较推荐使用ansible或者saltstack，这两个系统都是python写的，代码质量和社区活跃度都挺不错的。
ansible有官方的web ui——Tower，但实话实说不好用，所以我们也在重新做一套自己用起来更顺手的WEB UI。
四、日志集中分析工具 线上系统最常规的问题定位方式，就是日志分析了。
随着服务器的增多，日志的分析定位也成为一个难点和痛点（想象一下，系统出故障之后，要去几十甚至数百个节点去上去查日志，是有多折腾）。
国内有一家叫日志易的公司，是专门做日志分析方面的运维工具的。
另外还有一家log insight，也是做这个领域，但产品好像还处于beta阶段。
日志分析这个领域现在是一个热点，现在的开源方案也比较多了，比如著名的ELKStack，还有Flume+Kafka+Storm的体系。
上面这两个方案相对重一些，部署比较复杂，网上介绍的文章也不少。
比较轻量级的开源日志集中采集方案有python做的Sentry，他是通过改造各种语言的日志采集框架来实现日志的集中采集，各种主流的开发语言的日志框架都支持得很完整了，比如java的log4j和logpack。
Sentry的官网在此：Sentry - Track exceptions with modern error logging for JavaScript, Python, Ruby, Java, and Node.js
五、持续集成和发布工具 这方面其实比较难有统一的需求，很多公司集成发布的做法都差异挺大的。
持续集成方面，一般用jekins的比较多，这方面网上介绍的文章也很多。
而如何把打好的包发布至各台服务器，则可以通过批量运维工具或者脚本来完成了。
版本发布的过程涉及到很多细节，包括了版本文件的上传、分发、版本管理、回滚等各种操作。
对于一般不太复杂的项目，我比较推荐的做法是把打包好的文件上传到svn上，然后通过脚本在各台服务器上进行发布操作就行了，这样其实是利用了SVN来完成文件的上传、分发、版本管理、回滚等各种操作。
六、安全漏洞扫描工具 现在一个稍微有点知名度的系统，都会遭受各种各样的安全攻击的折磨。
一般的公司不太可能请得起专职的安全工程师，所以运维工程师最好能自己借助一些安全扫描工具来发现自己系统的漏洞。
安全工具方面我了解不多，不太熟这个领域的开源工具。
之前乌云网推出过一个SaaS化的漏扫平台——唐朝巡航，有对外提供漏洞扫描的API，不过最近乌云网一直在升级，所以也就暂时无法调用了。</description>
    </item>
    
    <item>
      <title>Huge page (大内存页) 到底是个啥</title>
      <link>http://zwsuo.github.io/tech/hugepage/</link>
      <pubDate>Wed, 21 Feb 2018 17:31:59 +0800</pubDate>
      
      <guid>http://zwsuo.github.io/tech/hugepage/</guid>
      <description>Huge page (大内存页) 到底是个啥   学习 Linux 中的大内存页 huge page。理解什么是“大内存页”，如何进行配置，如何查看当前状态以及如何禁用它。
 本文中我们会详细介绍大内存页 huge page ，让你能够回答：Linux 中的“大内存页”是什么？在 RHEL6、RHEL7、Ubuntu 等 Linux 中，如何启用/禁用“大内存页”？如何查看“大内存页”的当前值？
首先让我们从“大内存页”的基础知识开始讲起。
Linux 中的“大内存页”是个什么玩意？
“大内存页”有助于 Linux 系统进行虚拟内存管理。顾名思义，除了标准的 4KB 大小的页面外，它们还能帮助管理内存中的巨大的页面。使用“大内存页”，你最大可以定义 1GB 的页面大小。
在系统启动期间，你能用“大内存页”为应用程序预留一部分内存。这部分内存，即被“大内存页”占用的这些存储器永远不会被交换出内存。它会一直保留其中，除非你修改了配置。这会极大地提高像 Oracle 数据库这样的需要海量内存的应用程序的性能。
为什么使用“大内存页”？
在虚拟内存管理中，内核维护一个将虚拟内存地址映射到物理地址的表，对于每个页面操作，内核都需要加载相关的映射。如果你的内存页很小，那么你需要加载的页就会很多，导致内核会加载更多的映射表。而这会降低性能。
使用“大内存页”，意味着所需要的页变少了。从而大大减少由内核加载的映射表的数量。这提高了内核级别的性能最终有利于应用程序的性能。
简而言之，通过启用“大内存页”，系统具只需要处理较少的页面映射表，从而减少访问/维护它们的开销！
如何配置“大内存页”？
运行下面命令来查看当前“大内存页”的详细内容。
root@kerneltalks # grep Huge /proc/meminfo AnonHugePages: 0 kB HugePages_Total: 0 HugePages_Free: 0 HugePages_Rsvd: 0 HugePages_Surp: 0 Hugepagesize: 2048 kB 从上面输出可以看到，每个页的大小为 2MB（Hugepagesize），并且系统中目前有 0个“大内存页”（HugePages_Total）。这里“大内存页”的大小可以从 2MB 增加到 1GB。
运行下面的脚本可以知道系统当前需要多少个巨大页。该脚本取之于 Oracle。
#!/bin/bash # # hugepages_settings.</description>
    </item>
    
    <item>
      <title>Hugo&#43;Github</title>
      <link>http://zwsuo.github.io/tech/hugo&#43;github/</link>
      <pubDate>Fri, 12 Jan 2018 17:31:59 +0800</pubDate>
      
      <guid>http://zwsuo.github.io/tech/hugo&#43;github/</guid>
      <description>Hugo 配合 Github 实现个人静态博客  一直想弄个稳定、简单、好看的个人博客，记录下自己的思想、感悟、技术，及一些有趣的东西。现在好了，可以使用 Hugo 配合 Github 来完成了。
简单来说，就是使用 Hugo 这个转换引擎将 markdown 文件转为 html 静态资源，然后将静态资源传到 Github 上。
 步骤：
 1. 在 Github 上创建自己的 repo。 2. 在自己电脑上配置好 Hugo。 3. 创建 .md 文件然后使用 Hugo 引擎转换为 html。 4. 上传生成的 html 资源到第一步中的 repo。   详细步骤每一个都很多，就不细述了，因为每一步都有对应的官方文档可以参考，很详细。</description>
    </item>
    
  </channel>
</rss>